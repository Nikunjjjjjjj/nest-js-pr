     async getUsers(
      page: number = 1,
      limit: number = 10,
      filters: any = {},
    ): Promise<any> {
      const skip = (page - 1) * limit;
      const query: any = {};
  
      // Apply filters
      if (filters.phone) {
        query.phone = { $regex: filters.phone, $options: 'i' }; 
      }
      if (filters.name) {
        query.name = { $regex: filters.name, $options: 'i' };
      }
      if (filters.email) {
        query.email = { $regex: filters.email, $options: 'i' };
      }
      if (filters.role) {
        query.role = filters.role;
      }
      if (filters.status !== undefined) {
        query.status = filters.status;
      }
  
      // Fetch filtered users with pagination
      const users = await this.userSchema.find(query).skip(skip).limit(limit).exec();
  
      // Get total count for pagination
      const totalUsers = await this.userSchema.countDocuments(query).exec();
  
      return {
        totalUsers,
        //totalPages: Math.ceil(totalUsers / limit), 
        currentPage: page,
        users,
      };
    }